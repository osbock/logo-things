// OpenSCAD file automatically generated by svg2cookiercutter.py
// parameters tunable by user
wallHeight = 12;
minWallThickness = 2;
maxWallThickness = 3;
minInsideWallThickness = 1;
maxInsideWallThickness = 3;

wallFlareWidth = 5;
wallFlareThickness = 3;
insideWallFlareWidth = 5;
insideWallFlareThickness = 3;

featureHeight = 8;
minFeatureThickness = 1;
maxFeatureThickness = 3;

connectorThickness = 1.75;
cuttingTaperHeight = 2.5;
cuttingEdgeThickness = 1.25;
// set to non-zero value to generate a demoulding plate
demouldingPlateHeight = 0;
demouldingPlateSlack = 1.5;

// sizing
function clamp(t,minimum,maximum) = min(maximum,max(t,minimum));
function featureThickness(t)      = clamp(t,minFeatureThickness,maxFeatureThickness);
function wallThickness(t)         = clamp(t,minWallThickness,maxWallThickness);
function insideWallThickness(t)   = clamp(t,minInsideWallThickness,maxInsideWallThickness);

size = 62.043;
scale = size/62.043;

// helper modules: subshapes
module ribbon(points, thickness=1) {
    union() {
        for (i=[1:len(points)-1]) {
            hull() {
                translate(points[i-1]) circle(d=thickness, $fn=8);
                translate(points[i]) circle(d=thickness, $fn=8);
            }
        }
    }
}


module wall(points,height,thickness) {
    module profile() {
        if (height>=cuttingTaperHeight && cuttingTaperHeight>0 && cuttingEdgeThickness<thickness) {
            cylinder(h=height-cuttingTaperHeight+0.001,d=thickness,$fn=8);
            translate([0,0,height-cuttingTaperHeight]) cylinder(h=cuttingTaperHeight,d1=thickness,d2=cuttingEdgeThickness);
        }
        else {
            cylinder(h=height,d=thickness,$fn=8);
        }
    }
    for (i=[1:len(points)-1]) {
        hull() {
            translate(points[i-1]) profile();
            translate(points[i])   profile();
        }
    }
}


module outerFlare(path) {
  difference() {
    render(convexity=10) linear_extrude(height=wallFlareThickness) ribbon(path,thickness=wallFlareWidth);
    translate([0,0,-0.01]) linear_extrude(height=wallFlareThickness+0.02) polygon(points=path);
  }
}

module innerFlare(path) {
  intersection() {
    render(convexity=10) linear_extrude(height=insideWallFlareThickness) ribbon(path,thickness=insideWallFlareWidth);
    translate([0,0,-0.01]) linear_extrude(height=insideWallFlareThickness+0.02) polygon(points=path);
  }
}

module fill(path,height) {
  render(convexity=10) linear_extrude(height=height) polygon(points=path);
}


// data from svg file
connector_0 = scale * [[-73.712,220.796],[-122.073,182.694],[-120.167,180.203],[-71.807,217.426],[-73.712,220.796]];

connector_1 = scale * [[-66.239,188.410],[-120.900,216.253],[-122.366,214.348],[-67.704,185.039],[-66.239,188.410]];

outerWall_2 = scale * [[-64.358,199.168],[-64.507,202.130],[-64.954,205.064],[-65.693,207.941],[-66.719,210.733],[-68.021,213.414],[-69.586,215.958],[-71.399,218.340],[-73.444,220.538],[-75.699,222.529],[-78.144,224.296],[-80.756,225.821],[-83.508,227.089],[-86.374,228.088],[-89.327,228.808],[-92.338,229.244],[-95.379,229.389],[-98.420,229.244],[-101.431,228.808],[-104.384,228.088],[-107.250,227.089],[-110.002,225.821],[-112.614,224.296],[-115.059,222.529],[-117.315,220.538],[-119.359,218.340],[-121.172,215.958],[-122.738,213.414],[-124.039,210.733],[-125.065,207.941],[-125.804,205.064],[-126.251,202.130],[-126.401,199.168],[-126.251,196.206],[-125.804,193.272],[-125.065,190.395],[-124.039,187.603],[-122.738,184.922],[-121.172,182.378],[-119.359,179.996],[-117.315,177.799],[-115.059,175.807],[-112.614,174.040],[-110.002,172.516],[-107.250,171.248],[-104.384,170.248],[-101.431,169.528],[-98.420,169.093],[-95.379,168.947],[-92.338,169.093],[-89.327,169.528],[-86.374,170.248],[-83.508,171.248],[-80.756,172.516],[-78.144,174.040],[-75.699,175.807],[-73.444,177.799],[-71.399,179.996],[-69.586,182.378],[-68.021,184.922],[-66.719,187.603],[-65.693,190.395],[-64.954,193.272],[-64.507,196.206],[-64.358,199.168]];

feature_3 = scale * [[-93.030,223.540],[-99.456,222.372],[-102.961,221.203],[-110.555,215.070],[-113.330,210.250],[-115.520,204.846],[-115.813,200.465],[-115.667,197.106],[-114.790,192.725],[-113.038,188.782],[-110.993,185.861],[-108.510,183.086],[-105.151,180.603],[-100.770,178.267],[-97.411,177.244],[-94.052,176.514],[-92.592,176.514],[-92.738,183.086],[-96.243,183.670],[-101.354,185.423],[-104.421,187.759],[-107.634,191.995],[-108.802,195.500],[-109.533,200.319],[-109.095,203.824],[-107.634,207.913],[-105.590,210.980],[-102.961,213.755],[-99.748,215.362],[-97.119,216.384],[-93.760,216.822],[-92.884,217.114],[-93.030,223.540]];

feature_4 = scale * [[-92.884,217.114],[-88.941,216.238],[-84.413,214.631],[-81.492,212.149],[-78.279,208.790],[-76.673,204.554],[-75.943,199.735],[-76.235,195.938],[-77.403,192.725],[-79.156,189.512],[-82.077,186.299],[-85.874,184.254],[-92.738,183.086],[-92.738,189.512],[-90.985,189.658],[-86.896,191.410],[-84.851,193.309],[-83.391,195.646],[-82.369,198.567],[-82.515,200.903],[-83.099,204.554],[-84.559,206.745],[-86.750,208.790],[-88.502,209.812],[-91.423,210.688],[-92.738,210.542],[-92.884,217.114]];

feature_5 = scale * [[-98.579,210.396],[-92.738,210.542],[-92.738,189.512],[-98.579,189.512],[-98.579,210.396]];

// main modules
module cookieCutter() {
    fill(connector_0,connectorThickness);
    fill(connector_1,connectorThickness);
  wall(outerWall_2,wallHeight,wallThickness(0.265));
  outerFlare(outerWall_2);
  wall(feature_3,featureHeight,featureThickness(0.100));
  fill(feature_3,featureHeight);
  wall(feature_4,featureHeight,featureThickness(0.100));
  fill(feature_4,featureHeight);
  wall(feature_5,featureHeight,featureThickness(0.100));
  fill(feature_5,featureHeight);
}

module demouldingPlate(){
  // a plate to help push on the cookie to turn it out
  render(convexity=10) difference() {
    linear_extrude(height=demouldingPlateHeight) union() {
      polygon(points=outerWall_2);
    }
    translate([0,0,-0.01]) linear_extrude(height=demouldingPlateHeight+0.02) union() {
      ribbon(connector_0,thickness=demouldingPlateSlack);
      ribbon(connector_1,thickness=demouldingPlateSlack);
      ribbon(outerWall_2,thickness=demouldingPlateSlack+wallThickness(0.265));
      ribbon(feature_3,thickness=demouldingPlateSlack+featureThickness(0.100));
      ribbon(feature_4,thickness=demouldingPlateSlack+featureThickness(0.100));
      ribbon(feature_5,thickness=demouldingPlateSlack+featureThickness(0.100));
      polygon(points=connector_0);
      polygon(points=connector_1);
      polygon(points=feature_3);
      polygon(points=feature_4);
      polygon(points=feature_5);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
// final call, use main modules
translate([126.401*scale + wallFlareWidth/2,  -168.947*scale + wallFlareWidth/2,0])
  cookieCutter();

// translate([-40,15,0]) cylinder(h=wallHeight+10,d=5,$fn=20); // handle
if (demouldingPlateHeight>0)
  mirror([1,0,0])
    translate([126.401*scale + wallFlareWidth/2,  -168.947*scale + wallFlareWidth/2,0])
      demouldingPlate();
